{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPEyEvLZjOqnbbvtMANT0IO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"_d5NReon-__e","executionInfo":{"status":"ok","timestamp":1750792588056,"user_tz":-60,"elapsed":30907,"user":{"displayName":"Muadh Mazahir","userId":"10022503320677303432"}}},"outputs":[],"source":["import torch\n","import torchvision.models as models\n","import torchvision.transforms as transforms\n","from torchvision.datasets import CIFAR10\n","from torch.utils.data import DataLoader, Subset\n","from sklearn.svm import SVC\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import accuracy_score\n","import numpy as np\n","import random"]},{"cell_type":"code","source":["# --- 1. Setup ---\n","device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')"],"metadata":{"id":"AArLHKzPXh6t","executionInfo":{"status":"ok","timestamp":1750792598870,"user_tz":-60,"elapsed":13,"user":{"displayName":"Muadh Mazahir","userId":"10022503320677303432"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# 2. Load Dataset (e.g., CIFAR-10)"],"metadata":{"id":"y-WzmeDwIdpl"}},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.Resize(256),\n","    transforms.CenterCrop(224),\n","    transforms.ToTensor(),\n","    transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                         std=[0.229, 0.224, 0.225])\n","])\n","\n","test_dataset = CIFAR10(root='./data', train=False, download=True, transform=transform)\n","sample_indices = random.sample(range(len(test_dataset)), 1000)\n","test_subset = Subset(test_dataset, sample_indices)\n","test_loader = DataLoader(test_subset, batch_size=32, shuffle=False)"],"metadata":{"id":"k44e2j4xXphJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3. AlexNet"],"metadata":{"id":"0YMYGUv2IrmB"}},{"cell_type":"markdown","source":["## Set Up Pretrained AlexNet"],"metadata":{"id":"8Q_eFTTPKSOm"}},{"cell_type":"code","source":["alexnet = models.alexnet(pretrained=True)\n","alexnet.eval()\n","alexnet.to(device)"],"metadata":{"id":"ZnGbGC-xItlT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Evaluate AlexNet + Extract Features"],"metadata":{"id":"0gz798ZAJWLg"}},{"cell_type":"code","source":["alexnet_correct = 0\n","alexnet_total = 0\n","features_list = []\n","labels_list = []\n","\n","with torch.no_grad():\n","    for images, labels in test_loader:\n","        images = images.to(device)\n","        labels = labels.to(device)\n","\n","        outputs = alexnet(images)\n","        _, preds = torch.max(outputs, 1)\n","        alexnet_total += labels.size(0)\n","        alexnet_correct += (preds == labels).sum().item()\n","\n","        # Extract penultimate layer features\n","        penultimate = alexnet.classifier[:-1]\n","        feats = penultimate(alexnet.features(images).view(images.size(0), -1))\n","        features_list.append(feats.cpu().numpy())\n","        labels_list.append(labels.cpu().numpy())\n","\n","alexnet_accuracy = alexnet_correct / alexnet_total\n","print(f\"AlexNet Accuracy: {alexnet_accuracy:.4f}\")"],"metadata":{"id":"VBh5RO9UI7lv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 4. SVM"],"metadata":{"id":"BrOoLOz2JHsN"}},{"cell_type":"markdown","source":["## Prepare Features for SVM\n","\n"],"metadata":{"id":"TXu0loc6KDDU"}},{"cell_type":"code","source":["X = np.vstack(features_list)\n","y = np.hstack(labels_list)\n","\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"id":"S1YBnEpOJLF7","executionInfo":{"status":"ok","timestamp":1750792848207,"user_tz":-60,"elapsed":77,"user":{"displayName":"Muadh Mazahir","userId":"10022503320677303432"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["## Train + Evaluate SVM"],"metadata":{"id":"jy2PZA96KIOb"}},{"cell_type":"code","source":["svm = SVC(kernel='linear')\n","svm.fit(X_scaled, y)\n","y_pred = svm.predict(X_scaled)\n","svm_accuracy = accuracy_score(y, y_pred)\n","print(f\"SVM Accuracy (on same features): {svm_accuracy:.4f}\")"],"metadata":{"id":"PdvEywCCKbt7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 5. Comparison"],"metadata":{"id":"ris3Q0StK8bL"}},{"cell_type":"code","source":["if alexnet_accuracy > svm_accuracy:\n","    print(\"✅ AlexNet outperforms the SVM.\")\n","else:\n","    print(\"⚠️ SVM performs comparably or better (unexpected).\")"],"metadata":{"id":"RbhmWqjTLEfs"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"UNZQC7TXJ_HX"}}]}